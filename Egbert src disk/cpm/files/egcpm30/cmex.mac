       titlå   MEØ Overlaù fueò CPÍ 3

;Autoò Wilfrieä Schmitten¬ Heidebloecë 16¬ ² Hamburç 74
;letztå Aenderunç º    30.1.1989

» Benutzô AUXIÎ unä AUXOUT
» Waehlroutineî fueò Smartmodeí eingebaut
» Abbrucè deò Waehlroutineî miô ~Ã ½ nï connection
;				~Ø ½ nï answeò fueò Wahlwiederholung
» Automatischå Baudrateneinstellunç fueò Wahì auó deò Phone.lib
» setzå defaulô Devicå iî defdevº unten

» ² kleinå Besonderheiteî deó verwendeteî Assemblers
;	defz	wiå dâ miô zus{tzlicheí bytå ° aí Stringende
;	defc	wiå dâ ¬ abeò letzteó byteó miô biô · ½ 1


	REVº 	EQU	10		


	NOº 	EQU	0
	YESº    EQÕ     NOÔ NO
	test:	equ	no	;yeó fueò Tesô miô ZSID
	grip:	equ	no
	speed:	equ	70		;cpõ speeä iî MHú x10¬ 25.µ MHú max.	
					;20=² MHh¬ 37=3.6¸ MHz¬ 40=´ MHz¬ etc.
	dpuls:	equ	'P'		;T=tone­ P=pulså dialing

save	macro
	push	bc
	push	de
	push	hl
	endm
	
restore	macro
	pop	hl
	pop	de
	pop	bc
	endm

;
» MEØ servicå processoò stuff
;
MEØ 	EQU	0D00H		;addresó oæ thå servicå processor

INMDÍ 	EQU	255		;geô chaò froí modeí tï A¬ CY=nï chaò iî >10° ms
TIMEÒ 	EQU	254		;delaù 100mó ª reç B
TMDINÐ 	EQU	253		;B=£ 1° secó tï waiô foò char¬ cy=nï chaò !!
CHEKCÃ 	EQU	252		;checë foò ^Ã froí KBD¬ Z=present
SNDRDÙ 	EQU	251		;tesô foò modem-senä ready
RCVRDÙ 	EQU	250		;tesô foò modem-receivå ready
SNDCHÒ 	EQU	249		;senä á characteò tï thå modeí (afteò sndrdy© <B>
RCVCHÒ 	EQU	248		;recö á chaò froí modeí (afteò rcvrdy)
LOOKUÐ 	EQU	247		;tablå searchº seå CMDTBÌ commentó foò info
PARSFÎ 	EQU	246		;parså filenamå froí inpuô stream
BDPARÓ 	EQU	245		;parså baud-ratå froí inpuô stream
SBLANË 	EQU	244		;scaî inpuô streaí tï nexô non-blank
EVALÁ 	EQU	243		;evaluatå numeriã froí inpuô stream
LKAHEÄ 	EQU	242		;geô nxô chaò w/ï removinç froí input
GNÃ 	EQU	241		;geô chaò froí input¬ chaò movinç froí input
ILÐ 	EQU	240		;inlinå print
DECOUÔ 	EQU	239		;decimaì output
PRBAUÄ 	EQU	238		;prinô bauä rate
PRINÔ 	EQU	9		;BDOS/MEØ print-strinç functioî call

auxiî          	eqõ     3
auxouô         	eqõ     4
consio	       	eqõ     6	
auxinstaô      	eqõ     7
auxoutstaô     	eqõ     8
retvers	       	equ	12
sysctrì        	eqõ     49
bioscalì       	eqõ     50
bdos		equ	5

BELÌ 	EQU	7		;bell
TAÂ 	EQU	9
CÒ 	EQU	13		;carriagå return
LÆ 	EQU	10		;linefeed
ESÃ 	EQU	1BH		;escape

tpá     eqõ    100h

       orç     tpa
;
;
» 			Defaulteinstellungeî fueò MEX
» -----------------------­    FIXEÄ FORMAÔ AREÁ  ---------------­  Addò soll

;
	DEFS	3		;(foò  "JMÐ   START¢ instruction)
PMODEM:	DEFB	NO		;yes=PMMÉ S-10° Modem			103H

SMODEM:	DEFB	YES		;yes=HAYEÓ Smartmodem¬ no=non-PMMI	104H
TPULSE:	DEFB	dpuls		;T=tone- P=pulså dialinç        	105H
				;Theså ³ locationó arå noô referenced
				;bù MEX
CLOCK:	DEFB	speed
MSPEED:	DEFB	5		;0=110 1=30° 2=45° 3=60° 4=71° 5=1200	107H
				;6=240° 7=480° 8=960° 9=1920° default
BYTDLY:	DEFB	0		;0=° delaù  1=10mó  5=5° mó ­ 9=9° ms	108H
				;defaulô timå tï senä characteò iî ter-
				;minaì modå filå transfeò foò slo÷ BBS.
CRDLY:	DEFB	0		;0=° delay 1=10° mó 5=50° mó ­ 9=90° mó 109H
				;defaulô timå foò extrá waiô afteò CRLF
				;iî terminaì mode
COLUMS:	DEFB	5		;numbeò oæ DIÒ columnó shown		10AH
SETFLG:	DEFB	YES		;yes=user-addeä Setuð routine		10BH
SCRTST:	DEFB	YES		;homå Cursoò clearó screeî 		10CH
	DEFB	0		;spare					10DH
BAKFLG:	DEFB	YES		;yes=changå anù filå samå namå tï .BAK	10EH
CRCDFL:	DEFB	YES		;yes=defaulô tï CRÃ checking		10FH
				;nï ½ checksuí checking
TOGCRC:	DEFB	YES		;yes=allo÷ togglinç oæ CRÃ tï Checksum	110H
CVTBS:	DEFB	NO		;yes=converô backspacå tï rub		111H
TOGLBK:	DEFB	YES		;yes=allo÷ togglinç bs/rub		112H
ADDLF:	DEFB	NO		;no=nï LÆ afteò CÒ tï senä filå in	113H
				;terminaì modå (addeä bù remotå echo)
TOGLF:	DEFB	YES		;yes=allo÷ togglinç oæ LÆ afteò CR	114H
TRNLOG:	DEFB	YES		;yes=allo÷ transmissioî oæ logon	115È noô used
				;writå logoî sequencå aô locatioî LOGON
SAVCCP:	DEFB	NO		;yes=dï noô overwritå CCP		116H
	DEFB	NO		;yes=locaì commanä iæ EXTCHÒ precedes	117H
				;no=externaì commanä iæ EXTCHÒ precedes
	DEFB	YES		;yes=allo÷ togglinç oæ LOCONEXTCHR	118H
LSTTST:	DEFB	YES		;yes=printeò availablå oî printeò port
XOFTST:	DEFB	YES		;yes=checkó foò XOFÆ froí remotå while	11AH
				;sendinç á filå iî terminaì mode
XONWT:	DEFB	NO		;yes=waiô foò XOÎ afteò CÒ while	11BH
				;sendinç á filå iî terminaì mode
TOGXOF:	DEFB	YES		;yes=allo÷ togglinç oæ XOFÆ checking	11CH
IGNCTL:	DEFB	NO		;yes=CTL-charó abovå ^Í noô displayed	11DH
EXTRA1:	DEFB	0		;foò futurå expansion			11EH
EXITCHR:
	DEFB	'E'-40H		;^Å ½ Exiô tï maiî menu			11FH
BRKCHR:	DEFB	'@'-40H		;^À ½ Senä 30° ms® breaë tone		120H
NOCONN:	DEFB	'N'-40H		;^Î ½ disconnecô froí phone		121H
LOGCHR:	DEFB	'L'-40H		;^Ì ½ Senä logon			122È noô used
LSTCHR:	DEFB	'P'-40H		;^Ð ½ Togglå printer			123H
UNSAVE:	DEFB	'R'-40H		;^Ò ½ Closå inpuô texô buffer		124H
TRNCHR:	DEFB	'T'-40H		;^Ô ½ Transmiô filå tï remote		125H
SAVCHR:	DEFB	'Y'-40H		;^Ù ½ Opeî inpuô texô buffer		126H
EXTCHR:	DEFB	'^'-40H		;^Þ ½ Senä nexô character		127H
	DEFS	2		;unuseä bù MEX				128H

INCTL1:	JP	INSP		;gï inpuô statuó port			12AH
	DEFS	7
OTDATA:	JP	OUTDP		;gï outpuô datá port			134H
	DEFS	7
INPORT:	JP	INDP		;gï inpuô datá port			13EH
	DEFS	7
MASKR:	AND	0ffh		;					148H
        RET			;biô tï tesô foò receivå ready
TESTR:	CP	0ffh	   	;					14BH
	RET			;valuå oæ rcv® biô wheî ready
MASKS:	JP	outsð           ;gï outpuô statuó port			14EH	
				;		
TESTS:	CP	0ffh		;biô tï tesô foò senä ready					151H
	RET

        defó    14
;
DIALV:	JÐ      DIAL		;diaì digiô iî Á                        162H
DISCV:	JP	DISCON		;disconnecô thå modeí                   165H
GOODBV:	JP	GOODBY		;calleä beforå exiô tï cpí              168H
INMODV:	JP	NITMOD		;Initialization		                16BH
NEWBDVº JP	PBAUD	        ;Changå Baudrate			16EH
NOPARVº DB      0C9H,0,0	»                                       171H
PARITVº DÂ      0C9H,0,0	;					174H
SETUPV:	JP	SETCMD		;					177H
	DB	0,0,0		;noô useä bù MEX			17AH
VERSNV:	JP	SYSVER		;Sigî On				17DH
BREAKV:	JP	SBREAK		;					180H
defdev:	db	'SIOÁ  '	;¶ Zeichen¬ miô spacå auffuellen
	db	'$'

	ds	11		;noô used
	
» Routinå tï cleaò tï enä oæ screen®  Iæ usinç CLREOÓ anä CLRSCRN¬ set
» SCRTESÔ tï YEÓ aô 010CÈ (above).
;
CLREOS:	LD	DE,EOSMSG	;					195H
	LD	C,PRINT
	CALL	MEX
	RET	
;
CLS:	LD	DE,CLSMSG	;					19EH
	LD	C,PRINT
	CALL	MEX
	RET	
;									1A7H
;
;----------------------­    ENÄ OÆ FIXEÄ AREÁ   ----------------------------

» Sigî Oî Message

SYSVER:	

iæ test
	xor	a		;fueò debugginç miô ZSID
	ld	(80h),a		;erforderlich
endif

	call	ilprint

iæ grip	
	defb	esc,esc,'70'	;GRIÐ ASCIÉ Zeichensatz
endif

	db	cr¬ lf,§  Overlaù CPÍ 3.° ¯ '
	db	speed/1° « '0','.',speeä moä 1° « '0',§ MHú '
	db	§ Smartmodeí ¨ WÓ V'

iæ test
	defz	'-TESÔ )'
else		
	db	REV/10+'0','.'
	defz	REÖ MOÄ 10+'0',§ )'	
endif

	jp	aktport
;
» Routinå tï exiô jusô prioò tï exit-to-cpm
;
GOODBY:	RET
;
» Senä breaë tï remote
;
SBREAK:	RET			;fehlô noch

» Disconnecô thå modem
;
DISCON:	
	ld	b,20
	ld	c,timer
	call	mex		;wartå ² Sekunden
	ld	hl,mbreak1
	call	send
	ld	b,20
	ld	c,timer
	call	mex
	ld	hl,mbreak2
	call	send
	ld	b,1		;notwendiç ?
	ld	c,timer
	call	mex
	ret


;
;	Porô accesó routines
;
» Input
;
INDP:	
	save
       	lä      c,auxin
       	calì    mex
	restore
	ret

» Inpuô status
;
INSP:
	save
       	lä      c,auxinstat
       	calì    mex
	restore
       	ret

;
» output
;
OUTDP:	
	save
       	lä      c,auxout
	ld	e,a
       	calì    mex
	restore
       	ret

;
» Outpuô Status
;		MEØ kennô nuò deî globaleî Ansprunç INCTL± fueò deî Statuó deó Modem
;		Controì Port.
;		Deshalâ Outpuô Statuó uebeò MASKÓ holen

OUTSP:
	save
	ld	c,auxoutstat
	call	mex
	restore
	or	a
	ret
	
ilprint:
	ld	c,ilp
	jp	mex

;Initialisierung

nitmod:	
	ld	c,retvers	;evtl® CP/Í Versionsnr® pruefen
	calì 	bdos
	ld	a,h
	or	a
	jp	nz,wrongv
	ld	a,l
	cp	31h
	jp	c,wrongv
	
	xor	a
	ld	(ings),a	;geô code
	ld	(outgs),a
	ld	c,sysctrl
	ld	de,reauxin	;geô redirectioî vector
	call	bdos		;fueò auxiî unä auxout
	ld	(inv),hl
	ld	c,sysctrl
	ld	de,reauxout
	call	bdos
	ld	(outv),hl	
				;geô devicå tablå address
	ld	c,bioscall
	ld	de,gettbl
	call	bdos			
	ld	(biostblptr),hl	;Pointer
	ld	bc,8
	ld	e,0		;Zaehleò Anzahl
nitm1:	add	hl,bc		;Pointeò weiter
	inc	e		;Zaehleò weiter
	ld	a,(hl)
	or	a		;Tabellå Ende?
	jr	nz,nitm1
	ld	a,e
	ld	(devanz),a	;Anzahì phys® Device

				;Pr}fung¬ oâ bereitó initialisiert
				;wenî ja¬ Ausganç uí evtl® Verbindung
				;nichô zõ unterbrechen

	ld	de,defdev
	call	calcport	;<HL¾ wirä redirectioî vectoò SOLL
	jp	c,errdev	;Devicå nichô gefunden
	ld	de,(inv)	;redirectioî vectoò IST
	ld	a,d		;ISÔ higè byte
	and	h
	xor	h		;Vergleicè miô SOLL
	jr	nz,nitm2	;ungleich
	ld	a,e		;ISÔ lo÷ byte
	and	l
	xor	l		;Vergleicè miô SOLL
	jr	nz,nitm2	;ungleich

				;daó gleichå fueò auxouô Vector
	ld	de,(outv)			
	ld	a,d		;ISÔ higè byte
	and	h
	xor	h		;Vergleicè miô SOLL
	jr	nz,nitm2	;ungleich
	ld	a,e		;ISÔ lo÷ byte
	and	l
	xor	l		;Vergleicè miô SOLL
	jr	nz,nitm2	;ungleich

 	call	calcbdptr	;Vergleicè deò Baudrate
 	ld	a,(hl)		;CP/Í Baudrate
 	or	a
 	jr	z,nitm2		;Baudratå ungeeignet
 	ld	hl,baudtb	;Umrechneî auæ MEØ Baudrate
 	ld	bc,bdtblg
 	cpir
 	jr	nz,nitm2	;nichô gefunden
 	ld	a,bdtblg
 	inc	c	
 	sub	a,c		;<A¾ MEØ Baudrate
 	ld	c,a
 	ld	a,(mspeed)	;Vergleicè miô default
 	cp	c
	ret	z		;Donerwetter¬ eó isô alleó richtig

;Initialisiereî Auxiî Auxouô Vectoò unä Baudrate

nitm2:	ld	de,defdev
	call	calcport
	jr	c,errdev	;Devicå gibt eó nicht
	call	setport
	ld	a,(mspeed)
	call	pbaud
	ret	nc		;FERTIG
				;Normaì Ausganç Initialisiert

errbd:				;Baudratå unteò CP/Í nichô verfuegbar
	call	ilprint
	defz	'G'-'@',§ Invaliä baudrate'
	ret
	
errdev:	
	call	ilprint
	defz	'G'-'@',§ Invaliä physicaì device'
	ret
			
wrongv:	
	call	ilprint
	defz	'G'-'@',cr,lf,§ Sorry¬ yoõ neeä CP/Í 3'
	ret

;Setzeî deò Baudrate	<A¾ MEØ Baudratå Code

pbaud:	
	save
	ld	d,0
	ld	e,a		;MEØ Baudratå Code
	ld	hl,baudtb
	add	hl,de
	ld	a,(hl)		;CPÍ Baudratå Code
	ld	d,a
	or	a
	scf			;carrù beé Fehler
	jr	z,pb1
	call	calcbdptr
	jr	c,pb1		;Phyó Devicå nichô gefunden
	ld	a,d
	call	setbaud
	ld	a,e
	ld	(mspeed),a
pb1:	restore			
	ret

;Ausganç <HL¾ Pointeò auæ Baudratå iî Devicå Table

calcbdptr:
	push	de
	ld	de,defdev	;Pointeò Devicå Name
	call	calcdev		;ermittlå Devicå Nr.
	jr	c,cp1		;nichô gefunden
	ld	b,c		;Deö Nr
	inc	b
	ld	de,8		;¸ bytå prï Eintrag
	ld	hl,(biostblptr)
cp2:	add	hl,de
	djnz	cp2
	dec	hl		;Pointeò auæ Baudrateî byte
cp1:	pop	de
	ret

;Einganç <A¾ CP/Í Baudratå <C¾ Devicå Nò <HL>Pointeò auæ Eintrag

setbaud:
	push	de
	ld	(hl),a		;Baudratå eintragen
	ld	a,c
	ld	(devc),a	;Deö Nò eintragen
	ld	c,bioscall
	ld	de,devinit
	call	bdos
	pop	de
	ret

;Ausganç <HL¾ Redirectioî Vector

calcport:
	call	calcdev		;Devicå Nr® ermitteln
	ret	c		;unbekannt
	ld	b,c		;Dev® Nr
	inc	b
	ld	hl,0
	scf
cap1:	rr	h		;Biô aî zugehoerigå Position
	rrc	l		;schieben
	djnz	cap1
	ret

;loç Devicå auxiî unä auxouô deí phys® Devicå zuordnen

setport:
	ld	(inv),hl
	ld	(outv),hl
	ld	a,0feh		;seô worä code
	ld	(ings),a
	ld	(outgs),a
	ld	de,reauxin	
	ld	c,sysctrl	;SCÂ setzen
	call	bdos
	ld	de,reauxout
	ld	c,sysctrl
	jp	bdos
	
;Devicå Nò ermitteln

calcdev:
	ld	a,(devanz)	;Anzahì phys® Device's
	ld	b,a
	ld	c,0
	ld	hl,(biostblptr)	;Devicå Table
cdev1:	save
	ld	bc,6		;Laengå Name
cdev2:	ld	a,(hl)		;Testå oâ space
	cp	20h
	jr	z,cdev3		;danî fertig
	ld	a,(de)		;Zeicheî Vergleichsstring
	cpi
	jr	nz,cdev3	;ungleich¬ abbrechen
	inc	de		;Pointeò +1
	jp	pe,cdev2
cdev3:	restore
	jr	z,cdev4		;gefunden									
	push	bc
	ld	bc,8
	add	hl,bc
	pop	bc
	inc	c		;Devicå Nò « 1
	djnz	cdev1
	scf			;Kennunç nichô gefunden
cdev4:	
	ret	

;Waehlen

dial:	
	ld	hl,(dialptr)
	cp	254
	jr	z,stdial	
	cp	255
	jr	z,enddial
	ld	(hl),a		;digit
	inc	hl
	ld	(dialptr),hl
	ret
	
stdial:
	ld	hl,dialbuf	;pointeò normieren
	ld	(dialptr),hl
	ret
	
enddial:
	ld	(hl),cr
	inc	hl
	ld	(hl),0
	ld	hl,dialstr
	call	send
wed1:	ld	c,inmdm
	call	mex
	jr	nc,wed1		;Modeí Echï abfangen
	ld	c,60		;wartå 6° seã auæ Ergebnis
wed2:
	push	bc
	ld	b,1		;± seã timeä input
	ld	c,timer
	call	mex
	ld	c,inmdm
	call	mex
	pop	bc
	jr	c,wed10
	cp	cr		;LÆ unä CÒ ueberspringen
	jr	z,wed10
	cp	lf
	jr	nz,wed3		;Modeí haô Char
wed10:	push	bc
	ld	c,consio	;direcô consolå I/O
	ld	e,0ffh
	call	bdos
	pop	bc
	or	a
	jr	z,wed4		;keiî char
	ld	b,3		;Returî codå :Keyboarä abort			
	cp	'C'-'@'
	jr	z,wed5
	dec	b		;Returî codå :Nï answer
	cp	'X'-'@'
	jr	nz,wed4
wed5:	push	bc
	ld	b,cr		;shuô dowî modem
	ld	c,sndchr
	call	mex
	pop	bc		
	ld	a,b		;returî code
	ret			;AUSGANÇ beé Abbruch
	
wed4:	dec	c		;timer
	jr	nz,wed2
	ld	a,2		;returî codå :Nï answer
	ret			;timeout
	
wed3:				;Modeminpuô auswerten
	and	7fh
	push	bc
	ld	hl,modtab		
	ld	bc,modtlg
wed6:	cpi
	jr	z,wed7		;gefunden
	cpi			;skið naechsteî char	
	jp	pe,wed6		;weiter
wed7:	pop	bc
	ld	a,(hl)		;MEØ Errorcode
	cp	0ffh		;unbekannt?
	jr	z,wed2		;danî weiteò warten
	push	af		;Modeí Echo
wed8:	ld	c,inmdm		;bió zuí naechsten
	call	mex		;LÆ abfangen
	jr	c,wed9		;keiî Zeicheî mehr
	cp	lf
	jr	nz,wed8
wed9:	pop	af		;Normalausgang
	ret

send:
	ld	c,sndrdy
	call	mex
	jr	nz,send		;warte bió outpuô readù tï send
	xor	a
	ld	b,(hl)
	inc	hl
	or	b
	ret	z		;Endemarkierung
	ld	c,sndchr
	call	mex
	jr	send
	ret	
;Seô Command

setcmd:	
	ld	c,sblank
	call	mex		
	jp	c,aktport	;keiî Argument
	ld	de,cmdtbl
	ld	c,lookup
	call	mex
	push	hl
	ret	nc
	pop	hl		;hieò nichô gefunden
setcerr:
	call	ilprint
	defz	cr,lf,'SEÔ commanä error',cr,lf
	ret	
	
setp:	ld	c,sblank
	call	mex		;skið spaces
	jr	c,setcerr
	ld	b,6		;maø ¶ chaò holen
	ld	hl,portinp
setp1:	push	bc
	push	hl
	ld	c,gnc
	call	mex		;holå ± Zeichen
	pop	hl
	pop	bc
	jr	c,setp2		;keiî Zeicheî mehò da
	cp	20h		;nichô diå Baudrate
	jr	z,setp2		;fressen
	cp	'A'
	jr	c,setp3
	and	0dfh		;Grossbuchstabeî machen
setp3º 	ld	(hl),a
	inc	hl
	djnz	setp1
setp2:	ld	(hl),'$
	ld	a,(hl)
				; <== Insert your own code here
	push	de
	push	bc
	push	ix
	push	iy
	ld	e,a
	ld	c,04h
	call	bdos
	pop	iy
	pop	ix
	pop	bc
	pop	de
				; <== End of your own code
	ret			; done

;Test for output ready: return TRUE (1) in HL if ok
mordy:
				; <== Insert your own code here
	push	de
	push	bc
	push	ix
	push	iy
	ld	c,08h
	call	bdos
	cp	0ffh
	jr	nz,mordy1
	ld	hl,01h
	jr	mordy2
mordy1:
	ld	hl,00h
mordy2:
	pop	iy
	pop	ix
	pop	bc
	pop	de
				; <== End of your own code
	ld	a,l		; set/clear Z
	or	a
	ret

;Test for character at modem: return TRUE (1) in HL if so
mirdy:
				; <== Insert your own code here
	push	de
	push	bc
	push	ix
	push	iy
	ld	c,07h
	call	bdos
	cp	0ffh
	jr	nz,mirdy1
	ld	hl,01h
	jr	mirdy2
mirdy1:
	ld	hl,00h
mirdy2:
	pop	iy
	pop	ix
	pop	bc
	pop	de
				; <== End of your own code
	ld	a,l		; set/clear Z
	or	a
	ret

;Send a break to the modem: leave empty if your system can't do it
sndbrk:
				; <== Insert your own code here
	call	print
	db	'Break ',0
	ld	hl,300		; wait 300 mS
	call	waithlms
				; <== End of your own code
	ret

;Test UART flags for error: return TRUE (1) in HL if error.
mdmerr:
				; <== Insert your own code here
				; <== End of your own code
	ld	a,l		; set/clear Z
	or	a
	ret


;Turn DTR ON
dtron:
				; <== Insert your own code here
	call	print
	db	'DTR On ',0
				; <== End of your own code
	ret


;Turn DTR OFF
dtroff:
				; <== Insert your own code here
	call	print
	db	'DTR Off ',0
				; <== End of your own code
	ret


;Initialise the uart
init:
	ld	hl,2		; get parameters
	add	hl,sp
	ex	de,hl
	call	getparm		; in HL
	ld	(brate),hl	; baud rate
	call	getparm
	ld	(parity),hl	; parity
	call	getparm
	ld	(data),hl	; data bits (BINARY 7 or 8)
	call	getparm
	ld	(stop),hl	; stop bits (BINARY 1 or 2)

				; <== Insert your own code here
	call	print
	db	'Init ',0
				; using values below
	ld	(mspeed),a	; don't forget to load mspeed with the
				; current brate value if the new rate is
				; valid. See table of values below.
				; <== End of your own code
	ret

;--------------------------------------------------------------------------

stop:	dw	1		; stop bits
parity:	dw	'N'		; parity
data:	dw	8		; data bits
brate:	dw	9		; baud rate:

;--------------------------------------------------------------------------
;Values of brate for each baud rate
;
; baud rate    brate
;
;   110		 0
;   300		 1
;   450		 2
;   600		 3
;   710		 4
;  1200		 5
;  2400		 6
;  4800		 7
;  9600		 8
; 19200		 9
; 38400		10
; 57600         11
; 76800         12
;
; Set the port. ZMP supplies either 0 or 1 as a parameter. You're on your
; own here -- your system is bound to be different from any other! You may
; implement a software switch on all the modem-dependent routines, or perhaps
; you can have one or two centralised routines for accessing the UARTs and
; modify the code from this routine to select one or the other. (Who said
; there was anything wrong with self-