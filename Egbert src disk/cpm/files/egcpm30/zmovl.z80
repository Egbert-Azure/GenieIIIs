;-----------------------------------------------------------------------------
;
;
;	Overlay for ZMP (Z-Modem Program)
;
;	Name	ZMO-CP03.Z80
;
;	Dated   19 Sep 1988
;
;	Written by -
;	  Ron Murray, c/o Z-Node 62, 061-9-450-0200, Perth, Western Australia.
;
;
;  	Rename subsequent versions as ZMO-CPxx.Z80 etc
;
;
;	This overlay is set up for an generic CP/M Plus Computer, with a
;          Zenith Z19/Z29 terminal emulation.
;              Overlay by Alex Schmid...  1/3/90
;		Sign here ^
;	Modified to v1.3 standard rjm 12/10/88
;
;-----------------------------------------------------------------------------
;
;
;	System-dependent code overlay for ZMODEM
;
;
;    Insert your own code as necessary in this file. Code contained herein
; has been written in Z80 code for use with M80 or SLR. Assemble as follows:
;
;	SLR ZMO-CPxx/H
;	MLOAD ZMP.COM=ZMPX.COM,ZMO-CPxx.HEX
; or
;	M80 =ZMO-CPxx/Z
;	RELHEX ZMO-CPxx
;	MLOAD ZMP.COM=ZMPX.COM,ZMO-CPxx.HEX
;
;
;       (Do not change the code in the boxes)
;         
;
;-----------------------------------------------------------------------------
;
;
; Notes on modifying this file:
;
;    C requires that functions do not change either index register
; (IX or IY), nor the BC register pair. If your overlay requires any of
; these to be changed, ensure they are restored to the original values
; on return.
;    Since collecting parameters from C functions can be tricky, only change
; the parts marked 'Insert your own code here'. Do NOT modify the jump
; table at the start. Do NOT modify the entry/exit sections of each
; function. Do NOT pass 'GO'. Do NOT collect $200.
;    Apart from defining modem functions, this file also defines terminal
; characteristics. Most have been set up for ADM-3A (with a few of my own
; additions). Modify to suit your own terminal. An inline print routine
; is provided for printing strings in the usual way: usage is
;
;	call	print
;	db	'required string',0
;
;-----------------------------------------------------------------------------
;
;
;    Don't forget to set your clock speed at the clkspd variable.
;
;
;    If you find your overlay exceeds the maximum size (currently 0400h),
; you will have to contact me for another version. If too many people need 
; to do it, we haven't allowed enough room.
;
; Ron Murray 15/8/88
;
;-----------------------------------------------------------------------------

false	equ	0
true	equ	not false


; User-set variables: ***********

clkspd	equ	15		; Processor clock speed in MHz

debug	equ	false

userdef	equ	00145h		; origin of this overlay
				; This address should remain constant
				; with subsequent revisions.

; NOT user-set variables
mspeed	equ	003ch		; baud rate id
ovsize	equ	0400h		; max size of this overlay

	.z80			; use z80 code
	aseg			; absolute

	 if	debug
	org	100h		; so you can debug it with cebug, zsid, etc
	 else
	org	userdef
	 endif

esc	equ	1bh
ctrlq	equ	11h
bell	equ	7
cr	equ	0dh
lf	equ	0ah
bdos	equ	5


;-------------------------------------------------------------------------
; Main code starts here

codebgn	equ	$

;Jump table for the overlay: do NOT change this
jump_tab:
	jp	scrnpr		; screen print
	jp	mrd		; modem read with timeout
	jp	mchin		; get a character from modem
	jp	mchout		; send a character to the modem
	jp	mordy		; test for tx buffer empty
	jp	mirdy		; test for character received
	jp	sndbrk		; send break
	jp	cursadd		; cursor addressing
	jp	cls		; clear screen
	jp	invon		; inverse video on
	jp	invoff		; inverse video off
	jp	hide		; hide cursor
	jp	show		; show cursor
	jp	savecu		; save cursor position
	jp	rescu		; restore cursor position
	jp	mint		; service modem interrupt
	jp	invec		; initialise interrupt vectors
	jp	dinvec		; de-initialise interrupt vectors
	jp	mdmerr		; test uart flags for error
	jp	dtron		; turn DTR on
	jp	dtroff		; turn DTR OFF
	jp	init		; initialise uart
	jp	wait		; wait seconds
	jp	mswait		; wait milliseconds
	jp	userin		; user-defined entry routine
	jp	userout		; user-defined exit routine

;Spare jumps for compatibility with future versions
	jp	spare		; spares for later use
	jp	spare		; spares for later use
	jp	spare		; spares for later use
	jp	spare		; spares for later use
	jp	spare		; spares for later use

spare:	ret

;-------------------------------------------------------------------------


;Screen print function
scrnpr:

				; <== Insert your own code here

	call	print
	db	bell
	db	'This function not supported.',cr,lf
	db	0


				; <== End of your own code
	ret


;Get a character from the modem: return in HL
mchin:
	push	bc
				; <== Insert your own code here

	ld	c,3		; read AUX via BDOS
	call	5
				; <== End of your own code

	ld	l,a		; put in HL
	ld	h,0
	or	a		; set/clear Z
	pop	bc
	ret


;Send a character to the modem
mchout:
	ld	hl,2		; get the character
	add	hl,sp		;
	ld	a,(hl)		;
				; <== Insert your own code here
	push	bc
	push	de
	ld	e,a		; store character to E
	ld	c,4		; send character to AUX via BDOS
	call	5
	pop	de
	pop	bc

				; <== End of your own code
	ret			; done


;Test for output ready: return TRUE (1) in HL if ok
mordy:
				; <== Insert your own code here
	push	bc
	ld	c,8		; get status of AUX output
	call	5
	or	a
	ld	hl,0
	jr	z,mordy1
	inc	hl
mordy1:	pop	bc
				; <== End of your own code

	ld	a,l		; set/clear Z
	or	a
	ret
;--------------------------------------------------------------------------

;Test for character at modem: return TRUE (1) in HL if so
mirdy:
				; <== Insert your own code here
	push	bc
	ld	c,7
	call	5
	or	a
	ld	hl,0
	jr	z,mirdy1
	inc	hl
mirdy1:	pop	bc
				; <== End of your own code
	ld	a,l		; set/clear Z
	or	a
	ret

;Send a break to the modem: leave empty if your system can't do it
sndbrk:
				; <== Insert your own code here
				; <== End of your own code
	ret

;Test UART flags for error: return TRUE (1) in HL if error.
mdmerr:
				; <== Insert your own code here
	ld	hl,0
				; <== End of your own code
	ld	a,l		; set/clear Z
	or	a
	ret


;Turn DTR ON
dtron:
				; <== Insert your own code here
				; <== End of your own code
	ret


;Turn DTR OFF
dtroff:
				; <== Insert your own code here
				; <== End of your own code
	ret


;Initialise the SIO +++
init:
				; <== Insert your own code here
				; <== End of your own code
	ret


;****************************************************************************
;Video terminal sequences: these are for Zenith Z19/Z29: Modify as you wish
;Cursor addressing: 
cursadd:
	ld	hl,2		; get parameters
	add	hl,sp
	ex	de,hl
	call	getparm		; in HL
	ld	(row),hl	; row
	call	getparm
	ld	(col),hl	; column
				; <== Insert your own code here
				; using values in row and col
	call	print
	db	esc,'=',0	; leadin
	ld	a,(row)		; row first
	add	a,' '		; add offset
	call	cout
	ld	a,(col)		; sane for column
	add	a,' '
	call	cout
				; <== end of your own code
	ret

row:	ds	2		; row
col:	ds	2		; column


;Clear screen:
cls:
	call	print
	db	30,26,0
	ret

;Inverse video on:
invon:
	call	print
	db	esc,'(',0
	ret

;Inverse video off:
invoff:
	call	print
	db	esc,')',0
	ret

;Turn off cursor:
hide:
;call	print
;db	esc,'x5',0

;Turn on cursor:
show:
;call	print
;db	esc,'y5',0
	ret

;Save cursor position:
savecu:
;call	print
;db	esc,'j',0
	ret

;Restore cursor position:
rescu:
;call	print
;db	esc,'k',0
	ret

;****************************************************************************

;Service modem interrupt:
mint:
	ret

;Initialise interrupt vectors:
invec:
	ret

;De-initialise interrupt vectors:
dinvec:
	ret

;User-defined entry routine: leave empty if not used
userin:
	ret

;User-defined exit routine: leave empty if not used
userout:
	ret


;****************** End of user-defined code ********************************
; 		Do not change anything below here.


;Modem character test for 100 ms
mrd:
	push	bc		; save bc
	ld	bc,100		; set limit
mrd1:
	call	mirdy		; char at modem?
	jr	nz,mrd2		; yes, exit
	ld	hl,1		; else wait 1ms
	call	waithlms
	dec	bc		; loop till done
	ld	a,b
	or	c
	jr	nz,mrd1
	ld	hl,0		; none there, result=0
	xor	a
mrd2:
	pop	bc
	ret

; Inline print routine: destroys A and HL

print:
	ex	(sp),hl		; get address of string
ploop:
	ld	a,(hl)		; get next
	inc	hl		; bump pointer
	or	a		; done if zero
	jr	z,pdone
	call	cout		; else print
	jr	ploop		; and loop
pdone:
	ex	(sp),hl		; restore return address
	ret			; and quit

;
;Output a character in A to the console
;
cout:
	push	bc		; save regs
	push	de
	push	hl
	ld	e,a		; character to E
	ld	c,2
	call	bdos		; print it
	pop	hl
	pop	de
	pop	bc
	ret

;Wait(seconds)
wait:
	ld	hl,2
	add	hl,sp
	ex	de,hl		; get delay size
	call	getparm
				; fall thru to..
;Wait seconds in HL
waithls:
	push	bc		; save bc
	push	de		; de
	push	ix		; and ix
	ld	ix,0		; then point ix to 0
				; so we don't upset memory-mapped i/o

;Calculate values for loop constants. Need to have two loops to avoid
;   16-bit overflow with clock speeds above 9 MHz.

outerval	equ	(clkspd / 10) + 1
innerval	equ	(6667 / outerval) * clkspd

wait10:
	ld	b,outerval

wait11:
	ld	de,innerval

wait12:
	bit	0,(ix)		; time-wasters
	bit	0,(ix)
	bit	0,(ix)		; 20 T-states each
	bit	0,(ix)
	bit	0,(ix)
	bit	0,(ix)
	dec	de
	ld	a,e
	ld	a,d
	or	e
	jr	nz,wait12	; 150 T-states per inner loop
	djnz	wait11		; decrement outer loop
	dec	hl		; ok, decrement count in hl
	ld	a,h
	or	l
	jr	nz,wait10
	pop	ix		; done -- restore ix
	pop	de		; de
	pop	bc		; and bc
	ret

;Wait milliseconds
mswait:
	ld	hl,2
	add	hl,sp
	ex	de,hl		; get delay size
	call	getparm
				; fall thru to..
;Wait milliseconds in HL
waithlms:
	push	de
w1ms0:
	ld	de,39 * clkspd
w1ms1:
	dec	de
	ld	a,d
	or	e
	jr	nz,w1ms1
	dec	hl
	ld	a,h
	or	l
	jr	nz,w1ms0
	pop	de
	ret

;Get next parameter from (de) into hl
getparm:
	ex	de,hl		; get address into hl
	ld	e,(hl)		; get lo
	inc	hl
	ld	d,(hl)		; then hi
	inc	hl		; bump for next
	ex	de,hl		; result in hl, address still in de
	ret

	 if	($ - codebgn) gt ovsize
toobig:	jp	errval		; Overlay too large!
	 endif

	end
