; Timer Overlay Subroutine fuer das UUCP-Paket. Die Routine schreibt
; das Datum und die Zeit in einen Buffer, welcher in HL uebergeben wird
;
; Version 1.0 von Volker Dose
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
; !!!       funktioniert nur auf dem Genie IIIs mit Holte CP/M 3.1         !!!
; !!!	    mit dem Z180, da der Multiplikationsbefehl benutzt wird	   !!! 	
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

.var	wboot	0x0000
.var 	userf	30
.var	dauti	13

.org	0x0600

start:	push	hl			;Die Zieladresse wird in HL uebergeben
					;und  zwischengespeichert
					
	ld	hl,buffer		;Das Holte BIOS bietet die Funktion
	ld	c,dauti			;Nr 13 an, die das Datum + Zeit
	call	system			;in einen 22 Byte langen Buffer schreibt
	ld	hl,sec			;Dieser String muss umgewandelt werden
	ld	(ziel),hl		;in einen 7 Byte langen
	dec	hl			;HL zeigt nun auf die EinerStelle der
	dec	hl			;Sekunden, aufn Stack damit
	ld	(quelle),hl
	ld	b,3			;3 Zahlen sollen umgewandelt werden
loop:					;und zwar zuerst mal das Datum
	push	bc			;Der Schleifenzaehler wird gesichert
	call	asc2bin			;Die Umwandlung wird vollzogen
	ld	hl,(ziel)		;Die Zieladresse muss immer um 1
	inc	hl			;erhoeht werden
	ld	(ziel),hl		;und wieder zurueckgeschrieben
	call	uprog			;Die Quelladresse wird immer um 3 
	pop	bc			;decrmentiert
	djnz	loop

					;Der Datumsstring ist nicht in der
	ld	hl,yea			;richtigen Reihenfolge, also Zahl
	ld	(ziel),hl		;fuer Zahl umwandeln
	call	asc2bin
	call	uprog			;wieder die Quelladr. decementieren (3x)
	ld	hl,dat			;Hier steht dann der Tag
	ld	(ziel),hl
	call	asc2bin
	call	uprog
	ld	hl,mon			;Hier steht dann der Monat
	ld	(ziel),hl
	call	asc2bin	

	pop	de			;Nach der Umwandlung wird der
	ld	hl,sec			;String dort hin transferiert, wo er
	ld	bc,7			;hinsoll
	ldir 
	ld	hl,0			;HL = 0, Zeichen fuer alles okay
	ret

uprog:	ld	hl,(quelle)
	dec	hl
	dec	hl
	dec	hl
	ld	(quelle),hl
	ret

;  ASCII => Binaer Umwandlung, wandelt eine zwei Byte grosse Zahl in ASCII-
;  Darstellung in eine 'echte Binaerzahl um. Erwartet auf dem Stack die
;  Adressen, zuerst die Quelle in ASCII un dann die Zieladresse
;  zerstoert alle Register !!!!!

asc2bin:
	ld	hl,(quelle)	
	ld	a,(hl)			;Die Einer in den Accu
	sub	0x30			; ASCII => Binaer
	ld	e,a			;In E steht dann das Ergebnis
	dec	hl			;10er Stelle der Sekunden
	ld	a,(hl)
	sub 	0x30			;ASCII => Binaer
	ld	c,a			;die Multiplikation findet in BC statt
	ld	b,10			;10er Stelle
;	mlt	bc			;10er Stelle mal 10 + (E) ist das Ergebnis
	db	0xed
	db	0x4c

	ld	a,c			;in den Accu zum Weiterrechnen
	add	a,e
	ld	hl,(ziel)
	ld	(hl),a	
	ret

	
; SYSTEM ruft die Routinen in Bank 0 auf.		
system:	push	bc			;zun{chst BC sichern
	ld	ix,(wboot+1)		;(IX) Start der BIOS Jump Table	
	ld	bc,87			;Offset zum JP USERF
	add	ix,bc			;dazu addieren	
	pop	bc			;USERF-Nr. wieder zur}ck
	jp	(ix)			;Sprung nach USERF und zur}ck zum
					;Aufrufer von SYSTEM
quelle:	dw	0000
ziel:	dw	0000		
buffer:	ds	22
sec:	db	00
min:	db	00
hrs:	db	00
dat:	db	00
mon:	db	00
yea:	db	00
cen:	db	19
			

.org	0x06f0				;Timezone letter ID (?????)
	db	'MEZMSZ'

.org	0x06f7				;Europaeisches Datum
	db	0xff

.org	0x06f8				;Umschaltung Sommer-/Winterzeit
	db	4			;Monat	
	db	0			;Wochentag (sonntag)
	db	0			;limit date
	db	1			;direction
	db	10
	db	0
	db	32
	db	0
		