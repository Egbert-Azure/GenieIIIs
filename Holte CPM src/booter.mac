;******************************************************************************
;*  B O O T E R  *  C P M S Y S 2  *  T h o m a s   H o l t e  *  8 5 1 1 2 0 *
;******************************************************************************
;*									      									  *
;*    B O O T S T R A P   L O A D E R   F O R   C P / M   3   O N   T H E     *
;*    ===================================================================     *
;*									      									  *
;*        G E N I E  I I I s   M I C R O C O M P U T E R   S Y S T E M        *
;*	  ============================================================        	  *
;*									      									  *
;*									      									  *
;*  Thomas Holte			                         Version 1.1  			  *
;*									      									  *
;*  geändert von Volker Dose für Egbert Schröer.			      			  *
;*  									      								  *	
;*  Die Übertragung der Seriennummer vom Bildschirm in den Speicher           *
;*  zur Copyright-Protection wird gelöscht. Statt dessen werden NOPs          *
;*  eingebaut, um dort eventuell Code für Z180 Betrieb zu patchen.            *
;*									      									  *
;******************************************************************************
  
	.Z80

	ASEG
	ORG  0000H
	.PHASE 0FC00H

;load CP/M-system:
SECLEN	EQU  512		;length of a disk sector
$BUZZ	EQU  3860H		;buzzer address
$SYS0	EQU  0F9H		;port of system byte 0
$SYS1	EQU  0FAH		;port of system byte 1

	DI			;disable interrupts
	IM   1
	LD   SP,0FC00H		;init stackpointer

;clear screen:
	LD   A,00000001B	;enable bank 0
				;disable character RAM
	OUT  ($SYS0),A		;write system byte 0
	LD   A,01010100B	;enable memory mapped I/O
				;disable graphic display
				;disable boot EPROM
				;disable graphic page
				;enable full screen
				;disable video display
	OUT  ($SYS1),A		;write system byte 1

	.XLIST
	.XCREF

;	DEFB 0DDH,2EH,7		;LD LX,7     length of serial # --> reg. LX
;	LD   HL,3CB7H		;location of displayed serial # --> reg. HL
;	LD   DE,SERNO		;save location			--> reg. DE
;MOVE:	LD   A,(HL)		;get first byte of serial #
;	LD   (DE),A 		;store it
;	INC  HL			;inc ^source 
;	INC  DE			;inc ^destination
;	DEFB 0DDH,2DH		;DEC LX      dec counter
;	JR   NZ,MOVE		;get next byte

	nop			; Nops, damit das File dir selbe  
	nop			; L{nge beh{lt, und um dort die
	nop			; Einstellung der Waitzyklen f}r	
	nop			; Betrieb mit Z180 zu patchen.
	nop			;	
	nop			; Kann bei Betrieb mit Z80 aber auch
	nop			; wieder ge{ndert werden.
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
		





	.CREF
	.LIST

	LD   HL,3800H
	LD   DE,3801H
	LD   BC,7FFH
	LD   (HL),' '
	LDIR
	LD   A,11000101B	;disable memory mapped I/O
				;disable graphic display
				;disable boot EPROM
				;disable graphic page
				;enable keyboard
				;enable video display
	OUT  ($SYS1),A		;write system byte 1

;read first two tracks:
	LD   B,34              	;sector counter	        --> reg. B
LOOP: 	PUSH BC        		;save it
	CALL RDSEC 		;read selected sector into main memory
	OR   A			;disk error ?
	JP   NZ,ERROR
	LD   HL,(BUFFER)
	LD   BC,SECLEN
	ADD  HL,BC		;calc new load address
	LD   (BUFFER),HL
	LD   A,(SECTOR)
	INC  A			;increment sector #
	CP   20			;track exhausted ?
	JR   NZ,NXTSEC		;jump if not
	CALL STEPIN		;step in one track
	XOR  A			;reset sector #	
NXTSEC: LD   (SECTOR),A		;store sector #
	POP  BC			;restore sector counter
     	DJNZ LOOP		;read next sector

;move common code to the right place:
	LD   HL,3505H          	;source address      --> reg. HL
	LD   DE,0FE05H		;destination address --> reg. DE
	LD   BC,1FBH            ;byte count	     --> reg. BC	
	LDIR

;move CP/M loader to the right place:
	LD   HL,3700H          	;source address      --> reg. HL
	LD   DE,4400H		;destination address --> reg. DE
	LD   BC,0C80H           ;byte count	     --> reg. BC	
	LDIR
	JP   4400H		;jump into CP/M loader


*EJECT
;micro disk driver:

;FDC registers:
$FDSEL  EQU  0E0H               ;FDC select  register
$FDCMD  EQU  0ECH               ;FDC command register
$FDSTAT EQU  0ECH               ;FDC status  register
$FDSEC  EQU  0EEH               ;FDC sector  register
$FDDATA EQU  0EFH               ;FDC data    register

;FDC commands:
$STPIN	EQU  54H		;step in one track
$RDSEC  EQU  88H                ;read sector
$FCINT  EQU  0D0H               ;force interrupt


RDSEC:  LD   A,$FCINT           ;force interrupt
        OUT  ($FDCMD),A         ;reset FDC
        LD   A,(SECTOR)         ;sector #       	 --> accu
        CP   10                 ;front or back side ?
        LD   A,1                ;select code for drive 0 --> accu
        JR   C,SELECT           ;jump if front side
        SET  4,A                ;set side select bit
SELECT: OUT  ($FDSEL),A         ;select drive and side
	LD   A,$FCINT		;force interrupt
	OUT  ($FDCMD),A
	LD   A,(SECTOR)		;sector # --> accu
	CP   10			;back side ?
	JR   C,SETSEC		;jump if front side
	SUB  10			;adjust sector # 
SETSEC: OUT  ($FDSEC),A         ;store sector # in FDC reg
        LD   HL,(BUFFER)        ;get buffer pointer
        LD   A,$RDSEC        	;issue "read" command
	OUT  ($FDCMD),A
        LD   BC,12              ;56 usec delay
        CALL DELAY
        LD   C,$FDDATA          ;data register
READ1:	IN   A,($FDSTAT)	;get FDC status
        BIT  1,A                ;data request ?
        JR   NZ,READ2           ;yes, get byte
        BIT  0,A                ;full sector transferred ?
        JR   Z,STATUS           ;yes, go end process
	IN   A,($FDSTAT)	;get FDC status
        BIT  1,A                ;data request ?
        JR   NZ,READ2           ;yes, get byte
        BIT  7,A                ;drive not ready ?
        JR   Z,READ1            ;no loop
        RET                     ;return with error
READ2:  INI                     ;read char
        JR   READ1
STATUS: IN   A,($FDSTAT)        ;get FDC status
        AND  1CH                ;any errors ?
        RET

STEPIN: LD   A,$STPIN		;step in one track
	OUT  ($FDCMD),A
       	PUSH BC			;save reg. BC
        LD   BC,5               ;24 usec delay
        CALL DELAY
	POP  BC			;restore reg. BC
STEPIN1:IN   A,($FDSTAT)	;get FDC status
	BIT  0,A		;busy ?
	JR   NZ,STEPIN1		;jump if yes
	RET

DELAY:	DEC  BC			;decrement cycle count
	LD   A,B		;test if count zero
	OR   C			;combine LSB/MSB of count
	JR   NZ,DELAY		;loop until delay count exhausted
	RET			;rtn to caller


SECTOR:	DEFB 1			;current sector #
BUFFER:	DEFW 0000               ;current load address


*EJECT
ERROR:	LD   A,11000100B	;enable memory mapped I/O
	OUT  ($SYS1),A		;write system byte 1

	LD   HL,MSG		;^message		--> reg. HL	
        LD   DE,3C00H		;^first screen position --> reg. DE
	LD   BC,COPYRGT-MSG	;length of message	--> reg. BC
	LDIR			;output error message
	LD   B,100		;beep counter  --> reg. B
ALARM:	PUSH BC			;save counter

	LD   BC,0     		;repeat counter --> reg. B
                                ;  wait counter --> reg. C
BEEP:	LD   A,($BUZZ)		;turn on buzzer
	PUSH BC			;save base value of wait counter
BUZZON:	NOP			;little delay for lower frequency
	NOP
	NOP
	DEC  C			;decrement wait counter
	JR   NZ,BUZZON		;wait `til end of buzz
	POP  BC			;restore wait counter
	DJNZ BEEP		;turn on buzzer eleven times
	
	LD   BC,8000
        CALL DELAY

	POP  BC			;restore beep counter
	DJNZ ALARM		;beep 100 times
	JR   $			;hang up		

MSG:	DEFM 'DISK ERROR'

COPYRGT:DEFM 'Enhanced BIOS written by Thomas Holte  (c) 1985'
SERNO:	DEFS 7			;serial number field
	.DEPHASE


*EJECT
	ORG  01E0H

LDRBYTE:DEFB 2


	END