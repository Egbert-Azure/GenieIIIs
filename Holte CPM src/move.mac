;******************************************************************************
;*  M O V E  *  C P M S Y S 4 d  *  T h o m a s   H o l t e   *  8 5 0 7 1 7  *
;******************************************************************************
;*									      *
;*     M O V E   M O D U L E   F O R   C P / M 3   L I N K E D   B I O S      *
;*     =================================================================      *
;*									      *
;*									      *
;*  Thomas Holte						 Version 1.0  *
;*									      *
;******************************************************************************

	.Z80

	TITLE 'MOVE MODULE FOR CP/M3 LINKED BIOS'

        GLOBAL ?MOVE,?XMOVE,?BANK,?USERF

$SYS0	EQU  0F9H		;system byte 0
$SYS1 	EQU  0FAH		;system byte 1


	CSEG

?XMOVE: LD   A,0FFH		;remark interbank move
	LD   (IBANK),A
	LD   A,C		;source bank number --> accu
	AD  A,A		;source bank number --> upper nibble
	ADD  A,A
	AD  A,A
	ADD  A,A
	ADD  A,B		;destination bank number --> lower nibble
	LD   (BANK),A		;store bank numbers
	RET
BANK:	DEFS 1			;bank numbers
IBANK:	DEFB 0			;flag for interbank move


?MOVE:	EX   DE,HL		;we are passed source in DE and dest in HL
	LD   A,(IBANK)		;interbank move ?
	OR   A
	JR   Z,NIBANK		;jump if not
	XOR  A			;clear interbank move flag
	LD   (IBANK),A
	LD   A,(BANK)		;get source and destination bank number
	PUSH BC			;save byte count
	LD   B,C		;byte count --> reg. B
	LD   C,15		;function # --> reg. C
	CALL ?USERF		;perform interbank move
	POP  BC			;restore byte count	
	ADD  HL,BC		;calc new source address
	EX   DE,HL
	ADD  HL,BC		;calc new destination address
	RET
NIBANK:	LDIR			;use Z80 block move instruction
        EX   DE,HL              ;need next addresses in same regs
        RET


?BANK:	PUSH BC			;save reg. BC
      	RRCA			;bank number --> highest two bits
	RRCA
	AND  0C0H
	OR   1
	LD   C,A		;bank number --> reg. C
	IN   A,($SYS0)		;read system byte 0
	AND  00111101B		;disable character RAM
	OR   C			;set bank number
       	OUT  ($SYS0),A		;write system byte 0
	POP  BC			;restore reg. BC
	RET


;table of driver entry vectors:
$VDINIT	EQU  0    		;initialize the video controller chip M6845
$RSINIT	EQU  1    		;initialize the RS-232-C interface
$KBCHAR	EQU  2    		;get a keyboard character if available
$KBWAIT	EQU  3     		;wait for a keyboard character
$VDCHAR	EQU  4    		;display a character
$PRSTAT	EQU  5    		;test printer status
$PRCHAR	EQU  6    		;output a character to the printer
$RSRCST	EQU  7    		;get a character from the RS-232-C interface if
				;available
$RSRCV	EQU  8    		;receive a character from the RS-232-C
				;interface
$RSTXST	EQU  9    		;test the RS-232-C output status
$RSTX	EQU  10    		;transmit a character to the RS-232-C interface
$READ	EQU  11   		;read a disk sector
$WRITE	EQU  12   		;write a disk sector
$GETTIM	EQU  13   		;get time and date in binary format
$SETTIM	EQU  14   		;set time and date in binary format
$XMOVE	EQU  15			;interbank move
$GTIME3	EQU  18			;get time and date in CP/M 3 format
$STIME3	EQU  19			;set time and date in CP/M 3 format
$LDCHAR EQU  20			;load bit pattern for user definable char
$RSTCHR	EQU  21			;restore original character set
$SCRNIO	EQU  22			;direct screen I/O
$INIT	EQU  23			;general initialization routine
$CLOCK	EQU  24			;clock/display on/off


;call ROM driver routines:
	DEFS 50			;space for temporary stack
?USERF:	LD   (SAVESP),SP	;save stack pointer
	LD   SP,?USERF  	;temporary stack --> stack pointer
        PUSH BC			;save register set
	PUSH DE
	PUSH HL
	PUSH IX
	PUSH IY
	PUSH AF    		;save accu
	IN   A,($SYS0)		;read system byte 0
	LD   (PORT),A		;remember port data
	AND  00111101B		;enable bank 0
				;disable character RAM
	OR   00000001B		;enable common memory
	OUT  ($SYS0),A		;write system byte 0
	POP  AF    		;restore accu
       	RST  0     		;call driver routine
 	EI			;enable interrupts
	PUSH AF    		;save accu
	LD   A,(PORT)		;select current CPU bank
	OUT  ($SYS0),A
	IN   A,($SYS1)		;read system byte 1
	AND  11010111B		;disable graphic page
	OR   01000101B		;disable memory mapped I/O
				;disable boot EPROM
				;7.2 MHz clock frequency
	OUT  ($SYS1),A		;write system byte 1
	POP  AF    		;restore accu
	POP  IY			;restore register set
	POP  IX
	POP  HL
	POP  DE
	POP  BC
	LD   SP,(SAVESP)	;restore stack pointer
	RET			;return to caller

SAVESP: DEFS 2			;temporary memory for stack pointer
PORT:	DEFS 1			;temporary memory for system byte 0

	END
	