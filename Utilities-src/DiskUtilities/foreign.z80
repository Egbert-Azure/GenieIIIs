;********************************************************************************
;* 										*
;* 			F O R E I G N . C O M 					*
;* 										*
;* 										*
;* 		Utility for Genie IIIs with Holte CP/M Plus			*
;* 		Created by Volker Dose & Egbert Schroeer			*
;* 				(c) 1992					*
;* 										*
;* 		Update	for sdltrs emulator (c) 2023 				*
;* 		first assembler code since 30yrs E. Schroeer 			*
;*	 with crowd knowledge of Jens Guenther & Fritz Chwolka 	:)		*
;* 			added: 							*
;*			TRS80 format: TRS80					*
;*			MONTEZUMA CP/M format: MM-D80				*
;* This file contains the descriptions for various foreign formats that can    	*
;* be read with HOLTE-CP/M. The foreign disk is logged into drive P. Unlike 	*
;* KONFIG, there is no need to reboot, as the parameters to be changed are	*
;* patched in memory. HOLTE-CP/M requires the following information to be 	*
;* able to read foreign formats: 						*
;* 										*
;* 		1. The DPB disk parameter block 				*
;* 		2. The DTB drive control table 					*
;* 		3. The sector translation table 				*
;* 		They must be created by hand first				*
;* 										*
;* 		change log 03/19/2023						*
;*  Possible alian disk formats limited to 80 char in sum			*
;*  reduced to 8 bytes per name compared to 10 bytes to the origin		*
;*					03/26/2023				*
;* 		updated MM-D80 skew table fixed the bug				*
;********************************************************************************

; Define constants for special characters and BDOS functions
bel   equ 07h   ; character to be displayed on the screen
cr    equ 0dh   ; carriage return character
lf    equ 0ah   ; line feed character
esc   equ 1bh   ; escape character
bdos  equ 0005h ; address of BDOS call

; Define BDOS function numbers
wboot   equ 00h ; BDOS function warmstart
prtstr  equ 09h ; BDOS function to print a string
dirbios equ 50  ; BDOS function for a direct BIOS call

; Define addresses for BIOS functions
xmove  equ 0f857h ; BIOS function for interbank memory move
move   equ 0f84bh ; BIOS function for moving memory

; Define the address where the entered name is stored
xtail  equ 0082h

	org 100h

start	ld hl, xtail     ; the entered name must be saved
	ld de, nambuff   ; in a buffer to prevent overwriting
	ld bc, 8
	ldir
	
	ld de, hallo     ; DE points to the greeting message
	ld c, prtstr     ; BDOS call #9 to print a string
	call bdos        ; until the end character '$'
	
	ld hl, startlist ; HL points to the start of the name list
	ld (buff), hl    ; save it in a buffer for later use
	
loopy	ld de, nambuff   ; DE points to the entered name
	
loopx	ld a, (de)       ; has the end of the name been reached?
	cp 00h
	jr z, einstell   ; if yes, then a valid name has been entered
	
	cp (hl)          ; otherwise, compare with the list entry
	jr nz, dernicht  ; if incorrect character, move to next entry
	
	inc hl           ; if correct, move DE and HL one byte further
	inc de
	jr loopx         ; and continue
	
dernicht
	ld hl, (buff)    ; reset HL to the beginning of the buffer
	ld bc, 11        ; move to the end of the current entry
	add hl, bc
	ld a, (hl)       ; check if the end of the list has been reached
	cp 00h
	jr z, falsename  ; if no name has been recognized, ERROR
	
	ld (buff), hl    ; save HL in buffer
	jr loopy         ; repeat the loop
	
; FALSENAME
; If an incorrect foreign format name is entered, the list of all valid names is outputted.

falsename              ; Subroutine for incorrect foreign format name
    ld de,err1         ; Error message string
    ld c,prtstr       ; BDOS-Call #9, output string
    call bdos
    ld de,startlist   ; First element in the list of valid names,
loop
    ld (buff),de       ; stored to be incremented later.
    ld c,prtstr       ; All names are outputted until the end marker '00'.
    call bdos
    ld hl,(buff)
    ld bc,11          ; The names are 11 bytes apart.
    add hl,bc         ; HL now points to the next name or '00'.
    ex de,hl          ; DE is loaded with HL
    ld a,(de)         ; for BDOS-Call #9.
    cp 00
    jr nz,loop        ; Loop until the last name is outputted.
    ld c,wboot        ; Then warm start and return to operating system.
    call bdos

; EINSTELL: The respective parameter block is transferred to RAM.

einstell
    ld c,dirbios      ; First, the address of the DRIVETABLE is retrieved
                      ; via a BDOS-Call, where the addresses of all DPHs are stored.
    ld de,biospb      ; A parameter block is passed to the BDOS-Call.
    call bdos         ; HL+30 then points to the XDPH of drive P.
    ld bc,30
    add hl,bc         ; The content of HL is copied to DE, which contains
    ld e,(hl)         ; the address of the XDPH. It is stored in buff2 temporarily.
    inc hl
    ld d,(hl)
    ld (buff2),de
    ld bc,0100h       ; A memory load operation from bank 0 to bank 1 is performed.
    call xmove
    ld hl,buf4        ; buf4 is the target address, copying the entire XDPH in order to access DPB
    ld de,(buff2)
    ld bc,dphend-buf4 ; and the address of the Skew table.
    call move         ; Perform memory load operation.

; Copy the DPB to Common

	ld hl, (buff)       ; HL points to the name of the chosen format
	ld bc, 9            ; After 9 bytes comes the address of the corresponding parameter block, starting with the DPB
	add hl, bc
	ld e, (hl)          ; De points to the DPB to be loaded
	inc hl              ; HL points to the valid DPB in Common
	ld d, (hl)
	ld hl, (dpb)        ; HL points to the valid DPB in Common
	ld bc, 17           ; A DPB is 17 bytes long
	push de             ; DE points to the beginning of the parameter block and is still needed
	call move           ; Move data from DE to HL

; Copy the DCT of the format

	pop hl              ; Once again the beginning of the parameter block
	ld bc, 17           ; The DPB is 17 bytes long, followed by the Drive Control Table
	add hl, bc
	push hl             ; This address is saved again
	ld bc, 0001         ; Move data from Bank 1 to Bank 0
	call xmove
	ex de, hl           ; DE is the source address
	ld hl, (buff2)      ; Address of the XDPH in Bank 0
	ld bc, 25           ; After the XDPH of Drive P comes its DCT, which is where it should go
	add hl, bc
	ld bc, 5            ; 5 bytes
	call move           ; Move data from DE to HL

; Copy the skew table

	pop hl              ; The length of the skew table to be copied is determined, which comes directly after the DCT
	ld bc, 5
	add hl, bc
	push hl             ; Save the address
	ld bc, 0001         ; Interbank move from Bank 1 to Bank 0
	call xmove
	pop de
	ld a, (de)          ; Length of the skew table
	inc de              ; Now points to the beginning of the skew table
	ld hl, (buf4)      ; Address of the table
	ld b, 0             ; The address of the table is the first word of the XDPH
	ld c, a             ; The length was stored in the accumulator
	call move           ; Move data from DE to HL

; Report the success of the action

	ld hl, (buff)       ; Points to the name of the chosen format
	ld de, eintrag      ; It is copied into the output string
	ld bc, 8
	ldir
	ld de, gutis        ; Points to the message
	ld c, prtstr        ; BDOS-Call String output
	call bdos           ; Execute
	ld c, wboot         ; Warmstart back to the operating system
	call bdos

; List of character strings to output

hallo 	db cr, lf, esc, 'R', 'FOREIGN.COM', esc, 'S', ' sets drive P to foreign formats.', cr, lf
      	db '  Only for Genie IIIs with Holte CP/M +!', cr, lf, '$'
err1  	db cr, lf, bel, bel, 'Incorrect format name specified !!!!!!!!!!!', cr, lf
err2  	db 'The following format names are allowed:', cr, lf, lf, '$'
gutis 	db cr, lf, 'The new format '
eintrag ds 8
      	db 'is now valid for drive P!', cr, lf, '$'

; Intermediate buffer for register pair DE or HL
buff        dw      0000h
buff2       dw      0000h      ; contains the address of the XDPH of LW P
nambuff     ds      8          ; the selected name is saved here to prevent overwriting by CP/M

biospb                         ; The BIOS PARAMETER BLOCK must be specified
fnum        db      22         ; when a direct BIOS call is made through BDOS-Call 50
ainh        db      00
bcinh       dw      0000h      ; parameters to be passed are stored here
deinh       dw      0000h
hlinh       dw      0000h      ; the function number fnum=22 means "stop get ^DRVTBL"

buf4        dw      0000       ; buffer for the XDPH of drive P
            dw      0,0,0,0
            db      0,0
dpb         dw      0000
            dw      0000,0000
            dw      0000,0000
            dw      0000
            db      0
dct         db      0
            db      0
            db      0
            db      0
            db      0
dphend                          ; End of this buffer

; List of possible foreign formats
; The length of the character string is limited to 8.

startlist
	db	'MM-D80  ','$' ;first entry is the default format
	dw	MMD80
	db	'IBM-PC  ','$' 
	dw	ibmpc
	db	'S80-DD  ','$'
	dw	s80dsdd
	db	'D80-DD  ','$'
	dw	d80dsdd
	db	'KONTRON ','$'
	dw	kontron
	db	'PROF#4  ','$'
	dw	prof4
	db	'RAIR    ','$'
	dw	rair
	db	'TRS-80  ','$'
	dw	trs80
	db	'VORTEX  ','$'
	dw	vortex
	db	'ALPHA   ','$'
	dw	alpha
	db	00
	
endlist


s80dsdd	dw	0050h		; SPT : 128 byte records / track
	db	  05h		; BSH : block shift
	db	  1fh		; BSM : block mask
	db	  03h		; EXM : extend mask
	dw	00bfh		; DSM : maximum block number
	dw	00ffh		; DRM : maximum directory entry number
	db	 0c0h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0040h		; CKS : checksum size
	dw	  03h		; OFF : offset for system tracks
	db	  03h		; PSH : physical sector size shift
	db	  07h		; PHM : physical sector size mask
	
	db	  70h		; Byte 1 der drive control table
	db	  80h 		; Byte 2 der drive control table
	db	  02		; interleavingfaktor
	db	  10		; sector count / track
	db	  80		; number of usable tracks
	
	db	  51		; length of the skew table
         			; skew table

	db	  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
	db	  20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36
	db	  37,38,39,40,41,42,43,44,45,46,47,48,49,50
	
	
	
d80dsdd	dw	0050h		; SPT : 128 byte records / track
	db	  05h		; BSH : block shift
	db	  1fh		; BSM : block mask
	db	  03h		; EXM : extend mask
	dw	00c7h		; DSM : maximum block number
	dw	00ffh		; DRM : maximum directory entry number
	db	 0c0h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0040h		; CKS : checksum size
	dw	  00h		; OFF : offset for system tracks
	db	  03h		; PSH : physical sector size shift
	db	  07h		; PHM : physical sector size mask
	
	db	  70h		; Byte 1 der drive control table
	db	  80h		; Byte 2 der drive control table
	db	  02		; interleavingfaktor
	db	  10		; sector count / track
	db	  80		; number of usable tracks
	
	db	  51		; length of the skew table
         			; skew table

	db	  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
	db	  20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36
	db	  37,38,39,40,41,42,43,44,45,46,47,48,49,50
	

prof4	dw	0050h		; SPT : 128 byte records / track
	db	  04h		; BSH : block shift
	db	  0fh		; BSM : block mask
	db	  00h		; EXM : extend mask
	dw	017fh		; DSM : maximum block number
	dw	007fh		; DRM : maximum directory entry number
	db	 0c0h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0020h		; CKS : checksum size
	dw	  03h		; OFF : offset for system tracks
	db	  02h		; PSH : physical sector size shift
	db	  03h		; PHM : physical sector size mask
	
	db	  78h		; Byte 1 der drive control table
	db	  80h		; Byte 2 der drive control table
	db	  02		; interleavingfaktor
	db	  20		; sector count / track
	db	  80		; number of usable tracks
         			; skew table
	db	  0,2,4,6,8,1,3,5,7,9,10,12,14,16,18,11,13,15,17,19		


alpha 	dw	0050h		; SPT : 128 byte records / track
	db	  04h		; BSH : block shift
	db	  0fh		; BSM : block mask
	db	  00h		; EXM : extend mask
	dw	018ah		; DSM : maximum block number
	dw	007fh		; DRM : maximum directory entry number
	db	 0c0h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0020h		; CKS : checksum size
	dw	  01h		; OFF : offset for system tracks
	db	  03h		; PSH : physical sector size shift
	db	  07h		; PHM : physical sector size mask
	
	db	  78h		; Byte 1 der drive control table
	db	 0c0h		; Byte 2 der drive control table
	db	  01		; interleavingfaktor
	db	  10		; sector count / track
	db	  80		; number of usable tracks
	
	db	  51		; length of the skew table
         			; skew table
	db	  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
	db	  20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36
	db	  37,38,39,40,41,42,43,44,45,46,47,48,49,50
	

ibmpc	dw	0020h		; SPT : 128 byte records / track
	db	  04h		; BSH : block shift
	db	  0fh		; BSM : block mask
	db	  01h		; EXM : extend mask
	dw	009dh		; DSM : maximum block number
	dw	003fh		; DRM : maximum directory entry number
	db	  80h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0010h		; CKS : checksum size
	dw	  01h		; OFF : offset for system tracks
	db	  02h		; PSH : physical sector size shift
	db	  03h		; PHM : physical sector size mask
	
	db	  7ch		; Byte 1 of drive control table
	db	  80h		; Byte 2 of drive control table
	db	    1		; interleavingfaktor
	db	   18		; sector count / track
	db	   40		; number of usable tracks
	
	db	  51		; length of the skew table
         			; skew table

	db	  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
	db	  20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36
	db	  37,38,39,40,41,42,43,44,45,46,47,48,49,50
	
kontron	dw	0020h		; SPT : 128 byte records / track
	db	  04h		; BSH : block shift
	db	  0fh		; BSM : block mask
	db	  00h		; EXM : extend mask
	dw	012bh		; DSM : maximum block number
	dw	00ffh		; DRM : maximum directory entry number
	db	 0f0h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0040h		; CKS : checksum size
	dw	  04h		; OFF : offset for system tracks
	db	  01h		; PSH : physical sector size shift
	db	  01h		; PHM : physical sector size mask

	db	  78h		; Byte 1 of drive control table	
	db	  40h		; Byte 2 of drive control table
	db	    1		; interleavingfaktor
	db	   32		; sector count / track
	db	   77		; number of usable tracks

	db	   16		; length of the skew table
        			; skew table
	db	  0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13


rair	dw	0004h		; SPT : 128 byte records / track
	db	  04h		; BSH : block shift
	db	  0fh		; BSM : block mask
	db	  00h		; EXM : extend mask
	dw	0186h		; DSM : maximum block number
	dw	007fh		; DRM : maximum directory entry number
	db	 0c0h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0020h		; CKS : checksum size
	dw	  24h		; OFF : offset for system tracks
	db	  02h		; PSH : physical sector size shift
	db	  03h		; PHM : physical sector size mask
	
	db	  78h		; Byte 1 of drive control table
	db	  80h		; Byte 2 of drive control table
	db	    2		; interleavingfaktor
	db	   20		; sector count / track
	db	   80		; number of usable tracks
	
	db	  51		; length of the skew table
         			; skew table

	db	  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
	db	  20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36
	db	  37,38,39,40,41,42,43,44,45,46,47,48,49,50
	

vortex	dw	0048h		; SPT : 128 byte records / track
	db	  05h		; BSH : block shift
	db	  1fh		; BSM : block mask
	db	  03h		; EXM : extend mask
	dw	00b0h		; DSM : maximum block number
	dw	007fh		; DRM : maximum directory entry number
	db	 080h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0020h		; CKS : checksum size
	dw	  01h		; OFF : offset for system tracks
	db	  02h		; PSH : physical sector size shift
	db	  03h		; PHM : physical sector size mask
	
	db	  78h		; Byte 1 of drive control table
	db	  80h		; Byte 2 of drive control table
	db	  01		; interleavingfaktor
	db	  18		; sector count / track
	db	  80		; number of usable tracks
	
	db	  51		; length of the skew table
         			; skew table

	db	  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
	db	  20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36
	db	  37,38,39,40,41,42,43,44,45,46,47,48,49,50

trs80   db  	028H,000H   	;SPT= 128 	Byte records/track
	db	004H        	;BSH= 4		block shift factor  
    db 	00FH    		;BLM=  		block mask   
	db	000H        	;EXM=       extend mask  
    db  0F9H,002H 		;DSM=  	   maximum block number 
	db	0FFH,000H   	;DRM= 256  maximum directory number
	db	0F0H        	;AL0=      allocation vector 0
    db 	000H        	;AL1= 000      allocation vector 1
	db	000H        	;CKS=   0      checksum size is zero
                       	;              , permanently mounted
	db	002H,000H   	;OFF=   2      reserved tracks 
 	db	002H        	;PSH=   2      physical sector shift
	db	003H        	;PHM=   3      physical record mask
	
	db	51		; length of the skew table
        			; skew table

	db	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
	db	20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36
	db	37,38,39,40,41,42,43,44,45,46,47,48,49,50


MMD80	dw	0048h		; SPT : 128 byte records / track
	db	  04h		; BSH : block shift
	db	  0fh		; BLM : block mask
	db	  00h		; EXM : extend mask
	dw	0162h		; DSM : maximum block number
	dw	007fh		; DRM : maximum directory entry number
	db	 0C0h		; AL0 : allocation vector 0
	db	  00h		; AL1 : allocation vector 1
	dw	0020h		; CKS : checksum size
	dw	  01h		; OFF : offset for system tracks
	db	  01h		; PSH : physical sector size shift
	db	  01h		; PHM : physical sector size mask

	db	  78h		; Byte 1 of drive control table
	db	  80h		; Byte 2 of drive control table
	db	  02		; interleavingfaktor
	db	  36		; sector count / track
	db	  80		; number of usable tracks
	db	  36		; length of the skew table
				; skew table with skew factor 2

 	db	0,2,4,6,8,10,12,14,16,1,3,5,7,9,11,13,15,17,18,20
	db 	22,24,26,28,30,32,34,19,21,23,25,27,29,31,33,35

end	start

