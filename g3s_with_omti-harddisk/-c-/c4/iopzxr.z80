; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                                                                       *
; *                                                                       *
; *			       	I O P Z X R                               *
; *                                                                       *
; *                    	   IOP Loader for ZXRIOP		  	  *
; *									  *
; *                         ("Z X-Ray Machine")				  *
; *									  *
; *                 System Examination and Patching IOP                   *
; *                                                                       *
; *                                  by                                   *
; *                             Joe Mortensen                             *
; *                            4214 Chelsea Ct.                           *
; *                            Midland MI 48640                           *
; *         								  *
; *			Voice..........517 835-6923                       *
; *                     Ladera Znode...213 670-9465                       *
; *									  *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;
;
; Revision History
; ----------------
;
; 02/07/92	Initial Release
;  v1.0 -- Joe Mortensen
; 03/03/92
;  v1.1 -- Joe Mortensen
;		changed clock check to allow program to run w/o ZS/ZDDOS
;		and/or clock
; 04/17/92
;  v1.2 -- Joe Mortensen
;		slight change in display routine in ZXRIOP.Z80
;
;=============================================================================
;
; This module calls IOPLDR, which does all the work required to load and
; relocate the appended ZXRIOP.PRL IOP module.	It contains all the
; ZXRIOP-specific routines needed by IOPLDR.  Assemble and link using
; ZMAC/ZML:
;		ZMAC IOPZXR;ZML IOPZXR
;
; Finally, use Joe Wright's CON20 (rename IOPZXR.COM to IOPZXR.BIN first)
; or Gene Pizzetta's CONCAT to append the IOP module, ZXRIOP.PRL:
;
;		CON20 IOPZXR.COM=IOPZXR.BIN,ZXRIOP.PRL /
;	or	CONCAT IOPZXR.COM=ZXRIOP.PRL /OA
;
;=======================================================================
;
; Equates
;
off	equ	0
on	equ	0ffh
bdos	equ	0005
bell	equ	07
tab	equ	09
lf	equ	10
cr	equ	13
esc	equ	27
;
; Program version
;
mvers	equ	12
month	equ	04
day	equ	17
year	equ	92

;=======================================================================
;
; Entry points for module-specific addresses and routines required by
; the IOPLDR module:
;
	public	name,mdesc,mcml,mldmsg,mpars,mcfg,minst
;
; From IOPLDR get:
;
	.request	iopldr
	ext	iopldr,iop,nziop,uname
	ext	cout,eprint,phl4hc,$memry

;=======================================================================
;
enter:	jp	iopldr		; IOPLDR does all the work
	db	'Z3ENV'		; ZCPR3 Utility
	db	1		; Type 1
z3eadr:	dw	0		; Z3ENV address provided by ZCPR33+
	dw	enter		; ZCPR34 pad bytes
;
	db	'IOPZXR'	; Default CFG filename
	db	mvers/10+'0',mvers mod 10+'0'; 8 characters total
	db	0		; Termination

;=======================================================================
;
; IOP Configuration area - copied to IOP module at load time
;
config:

trigger:db	'@'-40h		; hotkey to invoke ZXRIOP (^@)

zsclk:	dw	0

cfglen	equ	$-config

;=======================================================================
;
; IOPZXR-specific routines called by IOPLDR:
;
;=======================================================================
;
; NAME is the zero-terminated loader name and version number for use in 
; the banner.
;
name:	db	'IOPZXR vers '	
	db	mvers/10+'0','.',mvers mod 10+'0'
	db	0		; Termination
;
; MDESC is a zero-terminated description of the module function that is
; displayed after the module name in the command line help screen.
;
mdesc:	db	' Debugger IOP',0

;=======================================================================
;
; MCML is displayed after the command line help screen to to allow the
; display of extended command line commands.
;
mcml:	
;
mopt:	ret

;=======================================================================
;
; MLDMSG is displayed after IOP load/exists messages to allow the
; display of IOP commands.
;
mldmsg:	ret			; No message required here

;=======================================================================
;
; MPARS does any required special command line parsing, system checks
; and execution of commands other than install and remove.
;
; Entry: HL=FCB+1
; Exit:  CARRY SET for error requiring exit without installing IOP
;	 Z set if system checks ok but no command found.  Look for bad cmd.
;	 NZ set if system checks ok and command found.	Install IOP.
;
mpars:	push	hl
	ld	c,48			; extended DOS check
	call	bdos
	ld	a,h
	cp	'S'			; must be ZSDOS
	jr	z,clkchk
	cp	'D'			; or ZDDOS
	jr	nz,noclock 
;
;
clkchk:	ld	de,clock		; check for clock
	ld	c,98			; BDOS get time
	call	bdos
	inc	a
	jr	nz,clkok		; clock present
;
noclock:call	eprint
	db	'No ZS/ZDDOS clock available!',cr,lf,bell,0
	jr	clkok0				; program will run w/o clock
;
clkok:	ld	a,on
	ld	(clkflg),a
clkok0:	pop	hl
good:	or	on
	ret
;
;=======================================================================
;
; MCFG -  does all required special configuration of the IOP module
;	  after it has been relocated into high memory and
;	  before internal IOP initialization is run.
; Entry:  HL,IX=address of IOP buffer, IY=address of local IOP
; Exit:   Z set if installation error
;	  NZ set if ok
; Uses:   IX, IY must be preserved.
;
mcfg:	push	ix
	push	iy
	exx			; save IOP address
	ld	a,(clkflg)
	or	a
	jr	z,noclk
	ld	hl,(109h)	; get Z3ENV address
	ld	de,42h		; offset to ZSDOS clock driver
	add	hl,de
	call	lhlhl		; get ZSDOS address
	ld	de,16h
	add	hl,de
	call	lhlhl		; HL=address of ZSDOS clock routine
	ld	(zsclk),hl	; save it locally
noclk:	exx			; restore IOP address
	ld	de,52h		; offset to IOP config area
	add	hl,de
	ex	de,hl		; DE=loaded IOP config address
	ld	hl,config	; HL=local config area
	ld	bc,cfglen	; BC=length of config area
	ldir			; move it
	pop	ix
	pop	iy
;
; MINST - does all required special installation of the IOP module
;	  after it has been relocated into high memory and and after
;	  internal IOP initialization is run.
; Entry:  HL,IX=address of IOP buffer, IY=address of local IOP
; Exit:   Z set if installation error
;	  NZ set if ok
;
minst:	or	on	; set NZ
	ret		; common NZ return

;
; Load HL with the two bytes it is pointing to
;
lhlhl:	ld	a,(hl)		; Low order to A
	inc	hl
	ld	h,(hl)		; High order to H
	ld	l,a		; Low order to L
	ret

;=======================================================================
;
; Data area
;
clkflg:	ds	1
clock:	ds	6		; initial clock read buffer

	end

