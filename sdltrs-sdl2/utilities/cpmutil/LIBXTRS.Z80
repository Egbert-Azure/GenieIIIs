; LIBXTRS.MAC
; ~~~~~~~~~~~
;
; Contents:
;	Z80 assembler program for CP/M.
;
; Purpose:
;	XTRS emulator functions
;
; Amendment History:
;	22MAR2003 RKG 1.0 Initial Release.

.Z80

;##############################################################################
; Macro Libraries
;##############################################################################

MACLIB CPM.MLB

MACLIB LIBSTR.MLB

;##############################################################################
; Start
;##############################################################################

xtrs_start::	defb	'LIBXTRS',0

;##############################################################################
; Messages
;##############################################################################

m_unkerr:	defb	'Unable to obtain HOST error message',cr,lf,'$'

m_spdnrml:	defb	'** normal speed **',cr,lf,'$'
m_spdhigh:	defb	'** high speed **',cr,lf,'$'

;##############################################################################
; Storage
;##############################################################################

f_spdchg:	defb	0		; speed change flag
f_spdold:	defb	0		; original speed setting (autodelay)

;##############################################################################
; Raw emulator traps
;##############################################################################

xtrssystem::
;==============================================================================
;	entry:	hl -> nul terminated command
;	exit:	a = status: 0 if OK, error number if not (Z flag affected)
;		bc = command exit status
;==============================================================================
		defw	28EDh
		ret

xtrsopen::
;==============================================================================
;	entry:	hl -> path, nul terminated
;		bc = oflag (use eo_ values defined below)
;		de = mode
;	exit:	a = status: 0 if OK, error number if not (Z flag affected)
;		de = fd, 0xFFFF if error
;------------------------------------------------------------------------------
;
eo_accmode	equ	03q
eo_rdonly	equ	00q
eo_wronly	equ	01q
eo_rdwr		equ	02q
;
eo_creat	equ	0100q
;
eo_excl		equ	0200q
;
eo_trunc	equ	01000q
;
eo_append	equ	02000q
;
;==============================================================================
		defw	30EDh
		ret

xtrsclose::
;==============================================================================
;	entry:	de = fd
;	exit:	a = status: 0 if OK, error number if not (Z flag affected)
;==============================================================================
		defw	31EDh
		ret

xtrsread::
;==============================================================================
;	entry:	bc = nbytes
;		de = fd
;		hl -> buffer
;	exit:	a = status: 0 if OK, error number if not (Z flag affected)
;		bc = nbytes read, 0xFFFF if error
;==============================================================================
		defw	32EDh
		ret

xtrswrite::
;==============================================================================
;	entry:	bc = nbytes
;		de = fd
;		hl -> buffer
;	exit:	a = status: 0 if OK, error number if not (Z flag affected)
;		bc = nbytes read, 0xFFFF if error
;==============================================================================
		defw	33EDh
		ret

xtrslseek::
;==============================================================================
;	entry:	bc = whence
;		de = fd
;		hL -> offset (8-byte little-endian integer)
;	exit:	a = status: 0 if OK, error number if not (Z flag affected)
;		hl -> location in file, 0xFFFFFFFF if error
;==============================================================================
		defw	34EDh
		ret

xtrsstrerror::
;==============================================================================
;	entry:	a = error number
;		bc = buffer size
;		hl -> buffer for error string
;	exit:	a = status: 0 if OK, new error number if not (Z flag affected)
;		bc = strlen(buffer), 0xFFFF if error
;		hl -> same buffer, containing \r\0 terminated string
;==============================================================================
		defw	35EDh		; unix error string
		ret

xtrsmisc::
;==============================================================================
;	entry:	a = function code (see em_ codes defined below)
;		other registers as listed below
;	exit:	other registers as listed below
;------------------------------------------------------------------------------
;
em_disk_change	equ	0		; disk change
;	exit:	hl = disk change count
;
em_exit		equ	1		; exit emulator
;
em_debug	equ	2		; enter debugger
;
em_reset	equ	3		; press reset button
;
em_modelquery	equ	5		; query model
;	exit:	hl = model: 1, 3, 4, or 5 (4P)
;
em_graphicquery equ	10		; query graphics type
;	exit:	hl = 0 (Radio Shack), 1 (Micro Labs)
;
em_graphicset	equ	11		; set graphics type
;	entry:	hl = 0 (Radio Shack), 1 (Micro Labs)
;
em_delayquery	equ	12		; query delay
;	exit:	bc = autodelay flag
;		hl = delay
;
em_delayset	equ	13		; query set
;	entry:	bc = autodelay flag
;		hl = delay
;
;==============================================================================
		defw	3CEDh		; emulator functions
		ret

;##############################################################################
; Extra functions
;##############################################################################

xtrserrmsg::
;==============================================================================
; Display error message
;	entry:	a = error number
;		de -> text to display before error message (0=>no message)
;	exit:	a = preserved
;		bc = trashed
;		de = trashed
;		hl = trashed
;	notes:	c_iobuf is overwritten with error message
;==============================================================================
		push af			; save
		push af
		ld a,d
		or e
		jr z,xtrserr1
		bdos b_couts		; display optional message

xtrserr1:	pop af
		ld de,c_iobuf		; buffer to store msg
		push de
		pop hl			; ld hl,de
		ld bc,c_iobufsize-2
		call xtrsstrerror
		jp nz,xtrserr3		; another error?!
		add hl,bc
		ld (hl),lf		; already has cr, add lf
		inc hl
		ld (hl),'$'		; add terminator
		bdos b_couts,c_iobuf
xtrserr2:	pop af			; restore
		ret

xtrserr3:	bdos b_couts,m_unkerr
		jr xtrserr2

xtrsmodel::
;==============================================================================
; Obtain model name
;	exit:	a = 'P' for Model 4P, 0 if single character (z flag set)
;		e = first character of model name '1', '3', or '4'
;==============================================================================
		push hl

	; fetch model info
		ld a,em_modelquery
		call xtrsmisc
		ld a,l			; model: 1, 3, 4, or 5 (4P)

		pop hl

	; model 4P check
		cp 5
		jr z,model4p		; model 4P?

	; single digit model
		add a,'0'		; convert to ascii
		ld e,a
		xor a			; clear and set flags
		ret

model4p:
	; model 4P
		ld e,'4'
		ld a,'P'
		or a			; set flags
		ret

xtrsrstrspd::
;==============================================================================
; Restore original speed
;==============================================================================
	; preserve regs
		push af
		push bc
		push de
		push hl

	; check if the speed was changed
		ld a,(f_spdchg)
		or a
		jr z,speed_done

	; reset speed changed flag
		xor a
		ld (f_spdchg),a

	; restore original speed
		ld a,(f_spdold)
		or a
		jr z,speed_high		; auto delay was 0, restore high speed
		jr speed_nrml		; auto delay was 1, restore normal speed

speed_done:
	; restore regs
		pop hl
		pop de
		pop bc
		pop af
		ret

xtrshighspd::
;==============================================================================
; Switch to high speed, save current settings
;==============================================================================
	; preserve regs
		push af
		push bc
		push de
		push hl

	; get current speed
		ld a,em_delayquery
		call xtrsmisc
		ld a,c			; autodelay
		or a
		jr z,speed_done		; already fast speed?

	; save original settings
		ld (f_spdold),a		; save current setting
		ld a,1
		ld (f_spdchg),a		; set speed change

speed_high:
	; switch to fast speed
		ld a,em_delayset
		ld hl,0			; as fast as possible
		ld bc,0			; turn off autodelay
		call xtrsmisc
		bdos b_couts,m_spdhigh
		jr speed_done

xtrsnrmlspd::
;==============================================================================
; Switch to normal speed, save current settings
;==============================================================================
	; preserve regs
		push af
		push bc
		push de
		push hl

	; get current speed
		ld a,em_delayquery
		call xtrsmisc
		ld a,c			; autodelay
		or a
		jr nz,speed_done	; already normal speed?

	; save original settings
		ld (f_spdold),a		; save current setting
		ld a,1
		ld (f_spdchg),a		; set speed change

speed_nrml:
	; switch to fast speed
		ld a,em_delayset
		ld hl,0			; as fast as possible
		ld bc,1			; turn on autodelay
		call xtrsmisc
		bdos b_couts,m_spdnrml
		jr speed_done

xtrsdiskname::
;==============================================================================
; Generate the appropriate disk filename
;	entry:	a = disk number '0', '1', '2', or '3'
;		de -> buffer to store disk filename "diskXX-X"
;	exit:	a = 0 if disk number is bad (z flag set) otherwise unchanged
;		de -> buffer containing disk filename
;==============================================================================
		cp '0'
		jr c,dsk_bad		; too small?
		cp '3'+1
		jr nc,dsk_bad		; too big?

	; valid disk number
		push hl			; save hl
		push af			; save disk number

		push de			; ld hl,de
		pop hl

	; "disk"
		ld (hl),'d'
		inc hl
		ld (hl),'i'
		inc hl
		ld (hl),'s'
		inc hl
		ld (hl),'k'
		inc hl

	; model
		push de			; save de
		call xtrsmodel
		ld (hl),e
		inc hl
		jr z,modeldone
		call caselc
		ld (hl),a
		inc hl
modeldone:	pop de			; restore de

	; hyphen
		ld (hl),'-'
		inc hl

	; disk num
		pop af			; restore disk number
		ld (hl),a
		inc hl

	; terminate
		ld (hl),0

		pop hl			; restore hl
		ret

dsk_bad:	xor a			; zero
		ret

;##############################################################################
; End
;##############################################################################

xtrs_end::	end
