/* unix.ccc -- Misosys C program to execute a Unix shell command from xtrs */

/* 
 * Copyright (c) 1998-2008, Timothy P. Mann
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#option redirect 0
#include "xtrsemt.h"
#include "xtrsemt.ccc"  /* could use separate compilation instead */

usage()
{
    fprintf(stderr, "usage: unix [-l] command\n");
    exit(1);
}

#define ERRBUFSIZE 256
#define CMDBUFSIZE 512

int main(argc, argv)
     int argc;
     char **argv;
{
    int ret, i, lower;
    char errbuf[ERRBUFSIZE];
    char cmdbuf[CMDBUFSIZE];
    char *p, *q;

    if (argc < 2) {
	usage();
    }
    i = 1;
    if (argv[i][0] == '-') {
	if (tolower(argv[i][1]) != 'l') {
	    usage();
        }
	i++;
	lower = 1;
    } else {
	lower = 0;
    }

    p = cmdbuf;
    for (; i<argc; i++) {
	q = argv[i];
	if (lower) {
	    while (*q) {
		if (*q == '[' && *(q+1)) {
		   q++;
		   *p++ = *q++;
		} else if (isalpha(*q)) {
		   *p++ = tolower(*q++);
		} else {
		   *p++ = *q++;
 		}
	    }
	} else {
	    while (*q) *p++ = *q++;
        }
	*p++ = ' ';
    }
    *p = '\000';
    /*printf("$ %s\n", cmdbuf);*/
    ret = emt_system(cmdbuf);
    if (ret == -1) {
	emt_strerror(errno, errbuf, ERRBUFSIZE);
	fprintf(stderr, "unix: %s\n", errbuf);
	exit(1);
    } else if (ret != 0) {
	emt_strerror(errno, errbuf, ERRBUFSIZE);
	fprintf(stderr, "unix: error (exit status %d, signal %d)\n",
	        ret >> 8, ret & 0xff);
	exit(1);
    }
    exit(0);
}
